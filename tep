
[1mFrom:[0m /home/troy/repos/odin-chess/lib/bishop.rb:20 Bishop#get_moves:

    [1;34m12[0m: [32mdef[0m [1;34mget_moves[0m(board_array)
    [1;34m13[0m:   legal_moves = []
    [1;34m14[0m:   move_set.each [32mdo[0m |direction|
    [1;34m15[0m:     [1;34m7[0m.times [32mdo[0m |i|
    [1;34m16[0m:       possible_move = []
    [1;34m17[0m:       offset = []
    [1;34m18[0m:       binding.pry
    [1;34m19[0m:       offset[[1;34m0[0m] = direction[[1;34m0[0m] * i
 => [1;34m20[0m:       offset[[1;34m1[0m] = direction[[1;34m1[0m] * i
    [1;34m21[0m: 
    [1;34m22[0m:       possible_move[[1;34m0[0m] = @current_pos[[1;34m0[0m] + offset[[1;34m0[0m]
    [1;34m23[0m:       possible_move[[1;34m1[0m] = @current_pos[[1;34m1[0m] + offset[[1;34m1[0m]
    [1;34m24[0m:       [32mif[0m possible_move[[1;34m0[0m].between?([1;34m0[0m, [1;34m7[0m) && possible_move[[1;34m1[0m].between?([1;34m0[0m, [1;34m7[0m) && board_array[possible_move[[1;34m0[0m]][possible_move[[1;34m1[0m]].piece.nil? [1;34m# rubocop:disable Layout/LineLength[0m
    [1;34m25[0m:         [1;34m# empty space[0m
    [1;34m26[0m:         legal_moves << possible_move
    [1;34m27[0m:       [32melsif[0m possible_move[[1;34m0[0m].between?([1;34m0[0m, [1;34m7[0m) && possible_move[[1;34m1[0m].between?([1;34m0[0m, [1;34m7[0m) && board_array[possible_move[[1;34m0[0m]][possible_move[[1;34m1[0m]].piece.color != @color [1;34m# rubocop:disable Layout/LineLength[0m
    [1;34m28[0m:         [1;34m# opposing piece space[0m
    [1;34m29[0m:         legal_moves << possible_move
    [1;34m30[0m:         [32mbreak[0m
    [1;34m31[0m:       [32melse[0m
    [1;34m32[0m:         [1;34m# friendly piece space[0m
    [1;34m33[0m:         [32mbreak[0m
    [1;34m34[0m:       [32mend[0m
    [1;34m35[0m:     [32mend[0m
    [1;34m36[0m:   [32mend[0m
    [1;34m37[0m:   legal_moves
    [1;34m38[0m: [32mend[0m


[1mFrom:[0m /home/troy/repos/odin-chess/lib/bishop.rb:19 Bishop#get_moves:

    [1;34m12[0m: [32mdef[0m [1;34mget_moves[0m(board_array)
    [1;34m13[0m:   legal_moves = []
    [1;34m14[0m:   move_set.each [32mdo[0m |direction|
    [1;34m15[0m:     [1;34m7[0m.times [32mdo[0m |i|
    [1;34m16[0m:       possible_move = []
    [1;34m17[0m:       offset = []
    [1;34m18[0m:       binding.pry
 => [1;34m19[0m:       offset[[1;34m0[0m] = direction[[1;34m0[0m] * (i + [1;34m1[0m)
    [1;34m20[0m:       offset[[1;34m1[0m] = direction[[1;34m1[0m] * (i + [1;34m1[0m)
    [1;34m21[0m: 
    [1;34m22[0m:       possible_move[[1;34m0[0m] = @current_pos[[1;34m0[0m] + offset[[1;34m0[0m]
    [1;34m23[0m:       possible_move[[1;34m1[0m] = @current_pos[[1;34m1[0m] + offset[[1;34m1[0m]
    [1;34m24[0m:       [32mif[0m possible_move[[1;34m0[0m].between?([1;34m0[0m, [1;34m7[0m) && possible_move[[1;34m1[0m].between?([1;34m0[0m, [1;34m7[0m) && board_array[possible_move[[1;34m0[0m]][possible_move[[1;34m1[0m]].piece.nil? [1;34m# rubocop:disable Layout/LineLength[0m
    [1;34m25[0m:         [1;34m# empty space[0m
    [1;34m26[0m:         legal_moves << possible_move
    [1;34m27[0m:       [32melsif[0m possible_move[[1;34m0[0m].between?([1;34m0[0m, [1;34m7[0m) && possible_move[[1;34m1[0m].between?([1;34m0[0m, [1;34m7[0m) && board_array[possible_move[[1;34m0[0m]][possible_move[[1;34m1[0m]].piece.color != @color [1;34m# rubocop:disable Layout/LineLength[0m
    [1;34m28[0m:         [1;34m# opposing piece space[0m
    [1;34m29[0m:         legal_moves << possible_move
    [1;34m30[0m:         [32mbreak[0m
    [1;34m31[0m:       [32melse[0m
    [1;34m32[0m:         [1;34m# friendly piece space[0m
    [1;34m33[0m:         [32mbreak[0m
    [1;34m34[0m:       [32mend[0m
    [1;34m35[0m:     [32mend[0m
    [1;34m36[0m:   [32mend[0m
    [1;34m37[0m:   legal_moves
    [1;34m38[0m: [32mend[0m


[1mFrom:[0m /home/troy/repos/odin-chess/lib/game.rb:121 Game#check_resolution:

    [1;34m108[0m: [32mdef[0m [1;34mcheck_resolution[0m(destination_space, moving_piece)
    [1;34m109[0m:   projected_board = [1;34;4mMarshal[0m.load([1;34;4mMarshal[0m.dump(@board))
    [1;34m110[0m:   proj_green_manifest = @green_manifest.clone
    [1;34m111[0m:   proj_white_manifest = @white_manifest.clone
    [1;34m112[0m: 
    [1;34m113[0m:   [32mif[0m destination_space.piece.nil?
    [1;34m114[0m:     destination_space.piece = moving_piece
    [1;34m115[0m:     projected_board.board_array[moving_piece.current_pos[[1;34m0[0m]][moving_piece.current_pos[[1;34m1[0m]].piece = [1;36mnil[0m
    [1;34m116[0m:     moving_piece.current_pos = [destination_space.board_x, destination_space.board_y]
    [1;34m117[0m:     moving_piece.first_move = [1;36mfalse[0m
    [1;34m118[0m:   [1;34m# if destination is occupied[0m
    [1;34m119[0m:   [32melse[0m
    [1;34m120[0m:     binding.pry
 => [1;34m121[0m:     [32mif[0m @turn == [33m:white[0m
    [1;34m122[0m:       proj_green_manifest.delete(projected_board.board_array[destination_space.board_x][destination_space.board_y].piece)
    [1;34m123[0m:     [32melsif[0m @turn == [33m:green[0m
    [1;34m124[0m:       proj_white_manifest.delete(projected_board.board_array[destination_space.board_x][destination_space.board_y].piece)
    [1;34m125[0m:     [32mend[0m
    [1;34m126[0m: 
    [1;34m127[0m:     destination_space.piece.taken = [1;36mtrue[0m
    [1;34m128[0m:     destination_space.piece.current_pos = [[1;36mnil[0m, [1;36mnil[0m]
    [1;34m129[0m:     destination_space.piece = moving_piece
    [1;34m130[0m:     projected_board.board_array[moving_piece.current_pos[[1;34m0[0m]][moving_piece.current_pos[[1;34m1[0m]].piece = [1;36mnil[0m
    [1;34m131[0m:     moving_piece.current_pos = [destination_space.board_x, destination_space.board_y]
    [1;34m132[0m:     moving_piece.first_move = [1;36mfalse[0m
    [1;34m133[0m:   [32mend[0m
    [1;34m134[0m: 
    [1;34m135[0m:   check_for_check(projected_board, proj_green_manifest, proj_white_manifest, turn)
    [1;34m136[0m: [32mend[0m

